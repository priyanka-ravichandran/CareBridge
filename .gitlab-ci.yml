# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:
  - build
  - test
  - deploy
  
variables:
  DOCKER_IMAGE_NAME: "carebridge-backend"
  VM_SSH_USER: $SERVER_USER
  VM_SSH_HOST: $SERVER_IP
  VM_SSH_PORT: "22"

build-backend-job:
  image: maven:3.8.3-openjdk-17
  stage: build
  script:
    - cd Backend
    - echo "Cleaning previous builds"
    - mvn -q clean
    - echo "Compiling the code..."
    - mvn -q package -DskipTests
    - echo "Compile complete. Artifacts created in Backend/target/"
  artifacts:
    paths:
      - Backend/target/Backend-0.0.1-SNAPSHOT.jar

build-frontend-job:
  image: node:21-alpine3.18
  stage: build
  script:
    - cd CareBridgeUi
    - echo "Creating an apk"
    - npm install expo
    - npm install -g eas-cli
    - echo -e "$EXPO_USER\n$EXPO_PASS\n" | eas login
    - eas build --platform android --local --output build/
  artifacts:
    paths:
      - CareBridgeUi/build/*.apk

unit-test-job:
  image: maven:3.8.3-openjdk-17
  stage: test
  script:
    - cd Backend
    - echo "Running unit tests... This will take about 60 seconds."
    - mvn '-Dtest=com.carebridge.backend.*Test' test

code-quality-job:
  image: maven:3.8.3-openjdk-17
  stage: test
  script:
    - java -jar DesigniteJava.jar -i Backend/ -o code_quality_outputs/ -d
  artifacts:
    paths:
      - code_quality_outputs/*.csv

deploy-job:
  stage: deploy
  only:
    - main
    - dev
  script:
    - echo "Deploying application..."
    - scp -P $VM_SSH_PORT Backend/target/Backend-0.0.1-SNAPSHOT.jar $VM_SSH_USER@$VM_SSH_HOST:home/student/Carebridge/
    - ssh -p $VM_SSH_PORT $VM_SSH_USER@$VM_SSH_HOST "docker stop $DOCKER_IMAGE_NAME && docker container rm -f $DOCKER_IMAGE_NAME && docker image rm -f $DOCKER_IMAGE_NAME"
    - ssh -p $VM_SSH_PORT $VM_SSH_USER@$VM_SSH_HOST "cd /home/student/CareBridge && docker build -t $DOCKER_IMAGE_NAME ."
    - ssh -p $VM_SSH_PORT $VM_SSH_USER@$VM_SSH_HOST "docker run -d --name $DOCKER_IMAGE_NAME -p 8080:8080 $DOCKER_IMAGE_NAME"
    - echo "Application successfully deployed."
