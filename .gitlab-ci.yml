# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy
  
variables:
  DOCKER_IMAGE_NAME: "carebridge-backend"
  VM_SSH_USER: $SERVER_USER
  VM_SSH_HOST: $SERVER_IP
  VM_SSH_PORT: "22"

build-job:       # This job runs in the build stage, which runs first.
  image: maven:3.8.3-openjdk-17
  stage: build
  script:
    - cd Backend
    - echo "Cleaning previous builds"
    - mvn -q clean
    - echo "Compiling the code..."
    - mvn -q package -DskipTests
    - echo "Compile complete."
    - mkdir build/
    - echo "My application" > build/careBridge-executable-binary
  artifacts:
    paths:
      - Backend/target/Backend-0.0.1-SNAPSHOT.jar

unit-test-job:   # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  script:
    - echo "Running unit tests... This will take about 60 seconds."
    - echo "Code coverage is 90%"
    #- cat $CI_PROJECT_DIR/build/careBridge-executable-binary

lint-test-job:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  script:
    - echo "Linting code... This will take about 10 seconds."
    - echo "No lint issues found."

deploy-job:      # This job runs in the deploy stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  only:
    - main
    - dev
  script:
    - echo "Deploying application..."
    - scp -P $VM_SSH_PORT Backend/target/your-spring-app.jar $VM_SSH_USER@$VM_SSH_HOST:/Carebridge/
    #- echo "$DOCKER_REGISTRY_PASSWORD" | docker login -u "$DOCKER_REGISTRY_USER" --password-stdin
    - ssh -p $VM_SSH_PORT $VM_SSH_USER@$VM_SSH_HOST "cd /home/student/CareBridge && docker build -t $DOCKER_IMAGE_NAME ."
    - ssh -p $VM_SSH_PORT $VM_SSH_USER@$VM_SSH_HOST "docker run -dp 8080:8080 $DOCKER_IMAGE_NAME"
    - echo "Application successfully deployed."
